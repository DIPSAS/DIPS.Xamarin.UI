<?xml version="1.0" encoding="utf-8"?>

<ContentPage x:Class="DIPS.Xamarin.UI.Samples.Controls.Sheet.SheetPage"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:Sheet="clr-namespace:DIPS.Xamarin.UI.Samples.Controls.Sheet;assembly=DIPS.Xamarin.UI.Samples"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:dxui="http://dips.xamarin.ui.com"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             ios:Page.UseSafeArea="true"
             mc:Ignorable="d">

    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Move"
                     Clicked="MoveSheet" />
    </ContentPage.ToolbarItems>
    <ContentPage.BindingContext>
        <Sheet:SheetPageViewModel />
    </ContentPage.BindingContext>
    <dxui:ModalityLayout>
        <dxui:ModalityLayout.Behaviors>
            <dxui:SheetBehavior x:Name="SheetBehavior"
                                Title="{Binding Title}"
                                CancelCommand="{Binding CancelCommand}"
                                VerticalContentAlignment="Fill"
                                ActionCommand="{Binding ActionCommand}"
                                ActionTitle="Action"
                                BindingContextFactory="{Binding SheetViewModelFactory}"
                                CloseOnOverlayTapped="{Binding Source={x:Reference ShouldCloseOnOverlayTappedCheckbox}, Path=IsChecked}"
                                ContentColor="{Binding ContentColor}"
                                HandleColor="{Binding HandleColor}"
                                HeaderColor="{Binding HeaderColor}"
                                IsCancelButtonVisible="True"
                                IsDraggable="{Binding IsDraggable}"
                                IsOpen="{Binding IsSheetOpen}"
                                Position="{Binding Position}"
                                SheetOpeningStrategy="FirstSnapPoint"
                                SnapPoints=".0,.5,.99"
                                IsBusy="{Binding IsBusy}"
                                BeforeOpenedCommand="{Binding InitCommand}">
                <dxui:SheetBehavior.SheetContentTemplate>
                    <DataTemplate x:DataType="{x:Type Sheet:InsideSheetViewModel}">
                        <!-- <ScrollView> -->
                        <!--     <StackLayout BindableLayout.ItemsSource="{Binding Items}"> -->
                        <!--         <BindableLayout.ItemTemplate> -->
                        <!--             <DataTemplate x:DataType="{x:Type Sheet:SomeClass}"> -->
                        <!--                 <Frame Padding="10" -->
                        <!--                        BackgroundColor="Azure" -->
                        <!--                        HasShadow="False"> -->
                        <!--                     <Frame.GestureRecognizers> -->
                        <!--                         <TapGestureRecognizer Command="{Binding ClickedCommand}" /> -->
                        <!--                     </Frame.GestureRecognizers> -->
                        <!--                     <StackLayout Orientation="Horizontal"> -->
                        <!--                         <Label Text="Some row title" HorizontalOptions="StartAndExpand" -->
                        <!--                                FontSize="20" /> -->
                        <!--                         <Label Text="Some row end" -->
                        <!--                                HorizontalOptions="End" /> -->
                        <!--                     </StackLayout> -->
                        <!--                 </Frame> -->
                        <!--             </DataTemplate> -->
                        <!--         </BindableLayout.ItemTemplate> -->
                        <!--     </StackLayout> -->
                        <!-- </ScrollView> -->
                        <!-- <Label Text="But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?"></Label> -->
                        <!-- -->
                        <CollectionView ItemsSource="{Binding Items}"
                                  BackgroundColor="Blue">
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="{x:Type Sheet:SomeClass}">
                                        <Frame Padding="10"
                                               BackgroundColor="Azure"
                                               HasShadow="False">
                                            <Frame.GestureRecognizers>
                                                <TapGestureRecognizer Command="{Binding ClickedCommand}"
                                                                      CommandParameter="{Binding .}"/>
                                            </Frame.GestureRecognizers>
                                            <StackLayout Orientation="Horizontal">
                                                <Label Text="Some row title" HorizontalOptions="StartAndExpand"
                                                       FontSize="20" />
                                                <Label Text="{Binding Text}"
                                                       HorizontalOptions="End" />
                                            </StackLayout>
                                        </Frame>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </DataTemplate>
                </dxui:SheetBehavior.SheetContentTemplate>
            </dxui:SheetBehavior>
        </dxui:ModalityLayout.Behaviors>

        <ScrollView>
            <StackLayout Padding="5"
                         HorizontalOptions="Fill">
                <Button Command="{Binding OpenSheetCommand}"
                        Text="Open sheet" />

                <Label FontSize="Title"
                       Text="Sheet properties"
                       VerticalTextAlignment="Center" />

                <Label Text="{Binding Position}" />

                <StackLayout HorizontalOptions="Fill"
                             Orientation="Horizontal">
                    <Label Text="IsDraggable"
                           VerticalTextAlignment="Center" />
                    <CheckBox IsChecked="{Binding IsDraggable}" />
                </StackLayout>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="VerticalContentAlignment"
                           VerticalTextAlignment="Center" />
                    <Picker Grid.Column="1"
                            SelectedItem="{Binding VerticalContentAlignment}">
                        <Picker.ItemsSource>
                            <x:Array Type="{x:Type dxui:ContentAlignment}">
                                <dxui:ContentAlignment>Fit</dxui:ContentAlignment>
                                <dxui:ContentAlignment>Fill</dxui:ContentAlignment>
                                <dxui:ContentAlignment>SameAsSheet</dxui:ContentAlignment>
                            </x:Array>
                        </Picker.ItemsSource>
                    </Picker>
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="HeaderColor"
                           VerticalTextAlignment="Center" />
                    <Entry Grid.Column="1"
                           Text="{Binding HeaderColor}"
                           TextColor="{Binding HeaderColor}" />
                </Grid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="ContentColor"
                           VerticalTextAlignment="Center" />
                    <Entry Grid.Column="1"
                           Text="{Binding ContentColor}"
                           TextColor="{Binding ContentColor}" />
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="HandleColor"
                           VerticalTextAlignment="Center" />
                    <Entry Grid.Column="1"
                           Text="{Binding HandleColor}"
                           TextColor="{Binding HandleColor}" />
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="Title"
                           VerticalTextAlignment="Center" />
                    <Entry Grid.Column="1"
                           Text="{Binding Title}" />
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           Text="HasActionButton"
                           VerticalTextAlignment="Center" />
                    <CheckBox Grid.Column="1"
                              IsChecked="{Binding HasActionButton}" />
                </Grid>

                <StackLayout>
                    <Label Text="Should close on overlay tapped" />
                    <CheckBox x:Name="ShouldCloseOnOverlayTappedCheckbox"
                              IsChecked="True" />
                </StackLayout>
                <Label IsVisible="{Binding StateText, Converter={dxui:IsEmptyConverter Inverted=True}}"
                       Text="{Binding StateText, StringFormat='State: {0}'}" />
            </StackLayout>
        </ScrollView>

    </dxui:ModalityLayout>
</ContentPage>